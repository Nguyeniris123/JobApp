from google.cloud import vision
import requests

def verify_image_with_google_vision(image_url):
    """
    X√°c minh ·∫£nh c√¥ng ty c√≥ ph·∫£i ·∫£nh th·∫≠t (m√¥i tr∆∞·ªùng l√†m vi·ªác) hay ·∫£nh m·∫°ng (stock).
    """
    client = vision.ImageAnnotatorClient()

    # T·∫£i ·∫£nh t·ª´ URL (Cloudinary ho·∫∑c ·∫£nh tr√™n m·∫°ng)
    response = requests.get(image_url)
    content = response.content

    # G·ª≠i ·∫£nh v√†o Google Vision API
    image = vision.Image(content=content)

    # Ph√¢n t√≠ch Web Detection (·∫£nh t·ª´ng xu·∫•t hi·ªán tr√™n internet ch∆∞a)
    web_detection = client.web_detection(image=image).web_detection

    # N·∫øu l√† ·∫£nh m·∫°ng, ta v·∫´n ti·∫øp t·ª•c ki·ªÉm tra n·ªôi dung label
    is_stock_photo = web_detection.full_matching_images or web_detection.pages_with_matching_images

    # Ph√¢n t√≠ch Label Detection (·∫£nh ch·ª©a n·ªôi dung g√¨)
    label_response = client.label_detection(image=image)
    labels = label_response.label_annotations
    keywords = [label.description.lower() for label in labels]

    # Debug log
    print("üß† Labels from Vision API:", keywords)

    trusted_keywords = {"office", "workspace", "building", "desk", "employee"}
    matched_keywords = trusted_keywords.intersection(set(keywords))

    print("‚úÖ Matched trusted keywords:", matched_keywords)

    # Tr∆∞·ªùng h·ª£p 1: ·∫£nh m·∫°ng + kh√¥ng c√≥ nh√£n vƒÉn ph√≤ng ‚Üí lo·∫°i
    if is_stock_photo and not matched_keywords:
        print("‚ùå ·∫¢nh m·∫°ng v√† kh√¥ng c√≥ n·ªôi dung ƒë√°ng tin.")
        return {
            "is_real": False,
            "reason": "Image appears on the internet and has no trusted office-related content"
        }

    # Tr∆∞·ªùng h·ª£p 2: ·∫£nh m·∫°ng nh∆∞ng c√≥ n·ªôi dung ƒë√°ng tin ‚Üí ch·∫•p nh·∫≠n
    if is_stock_photo and matched_keywords:
        print("‚ö†Ô∏è ·∫¢nh m·∫°ng nh∆∞ng c√≥ n·ªôi dung vƒÉn ph√≤ng. Cho qua.")
        return {
            "is_real": True,
            "reason": f"Image is on the internet, but contains trusted content: {matched_keywords}"
        }

    # Tr∆∞·ªùng h·ª£p 3: ·∫£nh m·ªõi, c√≥ n·ªôi dung vƒÉn ph√≤ng ‚Üí ch·∫•p nh·∫≠n
    if matched_keywords:
        print("‚úÖ ·∫¢nh m·ªõi, c√≥ n·ªôi dung vƒÉn ph√≤ng.")
        return {
            "is_real": True,
            "reason": f"Detected trusted keywords: {matched_keywords}"
        }

    # Tr∆∞·ªùng h·ª£p 4: ·∫£nh m·ªõi, nh∆∞ng kh√¥ng c√≥ n·ªôi dung ƒë√°ng tin ‚Üí lo·∫°i
    print("‚ùå ·∫¢nh kh√¥ng ƒë√°ng tin (kh√¥ng c√≥ nh√£n vƒÉn ph√≤ng).")
    return {
        "is_real": False,
        "reason": "No trusted office-related keywords found"
    }
